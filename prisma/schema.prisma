// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? 
    access_token             String? 
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?   @db.Text  
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    blogs         Blog[]    @relation("UserBlogs")
    comments      Comment[] @relation("UserComments")
    credential    UserCredential?
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Blog {
    id               String     @id @default(cuid())
    title            String
    slug             String     @unique
    metaDescription  String     @db.VarChar(160)  // Optimal length for SEO
    content          String     @db.Text
    imageUrl         String
    imageAlt         String?    // Alt text for image SEO
    author           User       @relation("UserBlogs", fields: [authorId], references: [id])
    authorId         String
    publishDate      DateTime   @default(now())
    updatedAt        DateTime   @updatedAt       // Important for content freshness
    readTime         Int        // In minutes for better structured data
    views            Int        @default(0)
    likes            Int        @default(0)
    tags             Tag[]
    comments         Comment[]
    keywords         String[]   // SEO keywords array
    canonicalUrl     String?    // For duplicate content issues
    structuredData   Json?      // For JSON-LD rich snippets
    ogTitle          String?
    ogDescription    String?
    ogImageUrl       String?
    twitterCard      String?    // Twitter card type
    featured         Boolean    @default(false)

    @@index([title])
    @@index([slug])
    @@index([publishDate])
}


model Tag {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?  @db.Text 
    blogs       Blog[]
    @@index([name])
}
model Comment {
    id        String   @id @default(cuid())
    content   String
    blog      Blog     @relation(fields: [blogId], references: [id])
    blogId    String
    author    User     @relation("UserComments", fields: [authorId], references: [id])
    authorId  String
    createdAt DateTime @default(now())
}

model UserCredential {
    id        String   @id @default(cuid())
    userId    String   @unique
    password  String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
